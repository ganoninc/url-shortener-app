/* tslint:disable */
/* eslint-disable */
/**
 * Vite URL Shortener - URL Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Request containing the original URL to be shortened
 * @export
 * @interface ShortenURLRequestDTO
 */
export interface ShortenURLRequestDTO {
    /**
     * Long URL to shorten
     * @type {string}
     * @memberof ShortenURLRequestDTO
     */
    'originalUrl': string;
}
/**
 * Response containing the shortened URL ID
 * @export
 * @interface ShortenURLResponseDTO
 */
export interface ShortenURLResponseDTO {
    /**
     * The shortened identifier for the URL
     * @type {string}
     * @memberof ShortenURLResponseDTO
     */
    'shortId'?: string;
}
/**
 * Response containing the shortened URL id, the original URL, and its creation date
 * @export
 * @interface UserUrlDTO
 */
export interface UserUrlDTO {
    /**
     * The shortened identifier of the URL
     * @type {string}
     * @memberof UserUrlDTO
     */
    'shortId'?: string;
    /**
     * The original URL
     * @type {string}
     * @memberof UserUrlDTO
     */
    'originalUrl'?: string;
    /**
     * The creation date
     * @type {string}
     * @memberof UserUrlDTO
     */
    'createdAt'?: string;
}

/**
 * UrlControllerApi - axios parameter creator
 * @export
 */
export const UrlControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of shortened URL created by the user
         * @summary Get user\'s URLs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUrls: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my-urls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a shortened URL for the provided original URL
         * @summary Shorten a URL
         * @param {ShortenURLRequestDTO} shortenURLRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenUrl: async (shortenURLRequestDTO: ShortenURLRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortenURLRequestDTO' is not null or undefined
            assertParamExists('shortenUrl', 'shortenURLRequestDTO', shortenURLRequestDTO)
            const localVarPath = `/shorten`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shortenURLRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UrlControllerApi - functional programming interface
 * @export
 */
export const UrlControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UrlControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of shortened URL created by the user
         * @summary Get user\'s URLs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUrls(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserUrlDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUrls(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UrlControllerApi.getUserUrls']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a shortened URL for the provided original URL
         * @summary Shorten a URL
         * @param {ShortenURLRequestDTO} shortenURLRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shortenUrl(shortenURLRequestDTO: ShortenURLRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShortenURLResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shortenUrl(shortenURLRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UrlControllerApi.shortenUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UrlControllerApi - factory interface
 * @export
 */
export const UrlControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UrlControllerApiFp(configuration)
    return {
        /**
         * Returns the list of shortened URL created by the user
         * @summary Get user\'s URLs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUrls(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserUrlDTO>> {
            return localVarFp.getUserUrls(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a shortened URL for the provided original URL
         * @summary Shorten a URL
         * @param {ShortenURLRequestDTO} shortenURLRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shortenUrl(shortenURLRequestDTO: ShortenURLRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ShortenURLResponseDTO> {
            return localVarFp.shortenUrl(shortenURLRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UrlControllerApi - object-oriented interface
 * @export
 * @class UrlControllerApi
 * @extends {BaseAPI}
 */
export class UrlControllerApi extends BaseAPI {
    /**
     * Returns the list of shortened URL created by the user
     * @summary Get user\'s URLs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlControllerApi
     */
    public getUserUrls(options?: RawAxiosRequestConfig) {
        return UrlControllerApiFp(this.configuration).getUserUrls(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a shortened URL for the provided original URL
     * @summary Shorten a URL
     * @param {ShortenURLRequestDTO} shortenURLRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlControllerApi
     */
    public shortenUrl(shortenURLRequestDTO: ShortenURLRequestDTO, options?: RawAxiosRequestConfig) {
        return UrlControllerApiFp(this.configuration).shortenUrl(shortenURLRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



